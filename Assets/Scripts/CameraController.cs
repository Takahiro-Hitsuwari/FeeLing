//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/jon/Actions/CameraController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraController"",
    ""maps"": [
        {
            ""name"": ""Stick"",
            ""id"": ""e452d444-480a-4e44-a2c5-43a2092ebd85"",
            ""actions"": [
                {
                    ""name"": ""StickLook"",
                    ""type"": ""Value"",
                    ""id"": ""148750e5-9d2e-44ed-a652-e4b4fdc3c19f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8fa0ae7-7f42-43a9-8b29-6bbf74ac7025"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StickLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Stick
        m_Stick = asset.FindActionMap("Stick", throwIfNotFound: true);
        m_Stick_StickLook = m_Stick.FindAction("StickLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stick
    private readonly InputActionMap m_Stick;
    private IStickActions m_StickActionsCallbackInterface;
    private readonly InputAction m_Stick_StickLook;
    public struct StickActions
    {
        private @CameraController m_Wrapper;
        public StickActions(@CameraController wrapper) { m_Wrapper = wrapper; }
        public InputAction @StickLook => m_Wrapper.m_Stick_StickLook;
        public InputActionMap Get() { return m_Wrapper.m_Stick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StickActions set) { return set.Get(); }
        public void SetCallbacks(IStickActions instance)
        {
            if (m_Wrapper.m_StickActionsCallbackInterface != null)
            {
                @StickLook.started -= m_Wrapper.m_StickActionsCallbackInterface.OnStickLook;
                @StickLook.performed -= m_Wrapper.m_StickActionsCallbackInterface.OnStickLook;
                @StickLook.canceled -= m_Wrapper.m_StickActionsCallbackInterface.OnStickLook;
            }
            m_Wrapper.m_StickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StickLook.started += instance.OnStickLook;
                @StickLook.performed += instance.OnStickLook;
                @StickLook.canceled += instance.OnStickLook;
            }
        }
    }
    public StickActions @Stick => new StickActions(this);
    public interface IStickActions
    {
        void OnStickLook(InputAction.CallbackContext context);
    }
}
